import React, { Component } from 'react';
import { connect } from 'react-redux';
import { meFromToken, meFromTokenSuccess, meFromTokenFailure, resetToken } from '../actions/users';
import App from '../components/App.js';
import { browserHistory } from 'react-router'

const mapDispatchToProps = (dispatch) => {
  return {
  	 loadUserFromToken: () => {
  	 	let token = sessionStorage.getItem('jwtToken');
  	 	if(!token || token === '') {//if there is no token, dont bother
  	 		return;
  	 	}

  	 //fetch user from token (if server deems it's valid token)
      dispatch(meFromToken(token))
        .then((response) => {
          if (!response.error) {
          	//reset token (possibly new token that was regenerated by the server)
          	sessionStorage.setItem('jwtToken', response.payload.config.headers.Authorization);
            dispatch(meFromTokenSuccess(response.payload))
            debugger
            browserHistory.push('/dashboard')
          } else {
          	sessionStorage.removeItem('jwtToken');//remove token from storage
            dispatch(meFromTokenFailure(response.payload));
          }
        });
  	 },
     resetMe: () =>{
     	sessionStorage.removeItem('jwtToken'); //remove token from storage
     	dispatch(resetToken());
     }
  }
}


export default connect(null, mapDispatchToProps)(App);
